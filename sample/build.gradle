import groovy.swing.SwingBuilder

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jcandksolutions.gradle:android-unit-test:1.2.+'
    }
}

// Manifest version information
def versionMajor = 1
def versionMinor = 0
def versionPatch = 1
def versionBuild = 0

apply plugin: 'android'

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

        packageName "com.twotoasters.multicolumnlistadapter.sample"
    }

    sourceSets {
        // Since we are not supporting instrument tests anymore, use the sourceset for our unit tests
        androidTest.setRoot('src/test')
    }

    signingConfigs {
        release {
            storeFile file("tt-release-keystore.jks")

            keyAlias 'PROMPT_DEV'
            storePassword 'PROMPT_DEV'
            keyPassword 'PROMPT_DEV'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

apply plugin: 'android-unit-test'

dependencies {
    compile 'com.android.support:support-v4:19.0.1'
    compile 'com.squareup.picasso:picasso:2.2.+'
    compile fileTree(dir: 'libs', includes: ['activeandroid*.jar'])
    compile project(':library')

    testCompile 'com.squareup:fest-android:1.0.+'
    testCompile 'junit:junit:4.10'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'org.robolectric:robolectric:2.4-SNAPSHOT'
    testCompile 'com.google.mockwebserver:mockwebserver:20130706'

    // These should mirror the testCompile dependencies above
    androidTestCompile 'com.squareup:fest-android:1.0.+'
    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.mockito:mockito-all:1.9.5'
    androidTestCompile 'org.robolectric:robolectric:2.4-SNAPSHOT'
    androidTestCompile 'com.google.mockwebserver:mockwebserver:20130706'
}


gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':sample:packageRelease')) {
        android.signingConfigs.release.storePassword = promptDev('KeyStore', 'Please enter the keystore password: ').toString();
        android.signingConfigs.release.keyAlias = promptDev('Alias', 'Please enter the key alias name: ').toString()
        android.signingConfigs.release.keyPassword = promptDev('Key', 'Please enter the key password: ').toString()
    }
}

def promptDev(dialogTitle, promptText) {
    def pass = ''
    if (System.console() == null) {
        new SwingBuilder().edt {
            dialog(modal: true,
                    title: dialogTitle,
                    alwaysOnTop: true,
                    resizable: false,
                    locationRelativeTo: null,
                    pack: true,
                    show: true
            ) {
                vbox {
                    label(text: promptText)
                    input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        pass = input.password;
                        dispose();
                    })
                }
            }
        }
    } else {
        pass = System.console().readPassword('\n' + promptText)
        pass = new String(pass)
    }

    if (pass.size() <= 0) {
        throw new InvalidUserDataException("You must enter a password to proceed.")
    }

    return pass
}